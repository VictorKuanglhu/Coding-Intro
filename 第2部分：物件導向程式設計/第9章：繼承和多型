### 9.1 類別的繼承

#### 9.1.1 什麼是繼承？
繼承是面向物件程式設計中的一個重要概念，它允許一個新的類別（子類別）繼承現有的類別（父類別）的屬性和方法。這意味著子類別可以繼承父類別的屬性和方法，同時還可以擴展或覆蓋它們。

#### 9.1.2 繼承的優點
- 代碼重用：你可以重用現有的類別，而不必重新編寫相同的代碼。
- 擴展：你可以擴展現有的類別，添加新的屬性和方法，以滿足特定需求。
- 結構化：通過繼承，你可以更好地組織和管理代碼。

#### 9.1.3 如何定義子類別？
子類別的定義方式如下：

```java
class 子類別名稱 extends 父類別名稱 {
    // 子類別的屬性和方法
}
```

#### 9.1.4 使用super關鍵字
super關鍵字用於引用父類別的屬性和方法。你可以使用super調用父類別的建構子和方法。

```java
public class 子類別 extends 父類別 {
    public 子類別() {
        super(); // 調用父類別的建構子
    }
    
    public void 子類別方法() {
        super.父類別方法(); // 調用父類別的方法
    }
}
```

### 9.2 介面和抽象類別

#### 9.2.1 介面（Interface）
介面是一個純抽象的類別，它只定義方法的簽名，但不提供方法的實作。類別可以實作一個或多個介面，並實現介面中定義的方法。

```java
interface MyInterface {
    void method1();
    void method2();
}
```

#### 9.2.2 抽象類別（Abstract Class）
抽象類別是一個包含抽象方法的類別，抽象方法是只定義方法簽名而不提供實作的方法。子類別必須實現父類別的抽象方法。

```java
abstract class MyAbstractClass {
    abstract void abstractMethod();
    void concreteMethod() {
        // 實作
    }
}
```

### 9.3 多型的概念

#### 9.3.1 什麼是多型？
多型是指一個物件可以以多種方式使用，它允許你使用父類別的引用來引用子類別的物件。這是面向物件程式設計中的一個重要概念，它使代碼更靈活且容易擴展。

#### 9.3.2 多型的實現
多型可以通過父類別引用指向子類別物件實現。例如：

```java
父類別 myObject = new 子類別();
```

在這個情況下，myObject是一個父類別的引用，但它實際上指向一個子類別的物件。這允許你調用子類別的方法，同時保持代碼的靈活性。

#### 9.3.3 實際範例
考慮以下範例，假設有一個動物父類別和兩個子類別：狗和貓。每個子類別都有自己的 `聲音()` 方法。

```java
class 動物 {
    void 聲音() {
        System.out.println("這是一個動物的聲音");
    }
}

class 狗 extends 動物 {
    void 聲音() {
        System.out.println("狗在叫");
    }
}

class 貓 extends 動物 {
    void 聲音() {
        System.out.println("貓在叫");
    }
}
```

現在，我們可以創建一個動物的陣列，其中包含狗和貓，並呼叫它們的 `聲音()` 方法，實現多型：

```java
動物[] 動物們 = new 動物[2];
動物們[0] = new 狗();
動物們[1] = new 貓();

for (動物 animal : 動物們) {
    animal.聲音();
}
```

這將輸出：

```
狗在叫
貓在叫
```

這個例子展示了多型的優點，即你可以使用父類別的引用來引用不同的子類別物件，並根據實際的物件類型來調用相應的方法。
